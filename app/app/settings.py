"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 3.2.14.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os

from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'changeme')

# SECURITY WARNING: don't run with debug turned on in production!
#DEBUG = bool(int(os.environ.get('DEBUG', 0)))
DEBUG=True

ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "localhost,127.0.0.1").split(",")
CSRF_TRUSTED_ORIGINS = os.getenv("ALLOWED_CSRF", "http://localhost").split(",")

# Permitir 0.0.0.0 solo si estamos en modo desarrollo
ALLOWED_HOSTS = list(set(ALLOWED_HOSTS))
CSRF_TRUSTED_ORIGINS = list(set(CSRF_TRUSTED_ORIGINS))

# 🟠 Si estás en desarrollo, añade 0.0.0.0 para pruebas
if bool(int(os.getenv("DEBUG", 0))):  
    ALLOWED_HOSTS.append("0.0.0.0")


X_FRAME_OPTIONS = 'SAMEORIGIN'
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO','https')

CORS_ALLOW_ALL_ORIGINS= True
CORS_ALLOW_CREDENTIALS= True

CSRF_TRUSTED_ORIGINS_ENV = os.environ.get('ALLOWED_CSRF', "http://localhost")
if(CSRF_TRUSTED_ORIGINS_ENV):
    CSRF_TRUSTED_ORIGINS.extend(CSRF_TRUSTED_ORIGINS_ENV.split(','))

# Application definition

INSTALLED_APPS = [
    'corsheaders',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'core',
    'api_forwardingcr',
    'drf_spectacular',
    'drf_spectacular_sidecar', 
    #'rest_framework_datatables',
    'django_filters',
    'storages',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # new
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    #'core.middleware.ProcessExceptionMiddleware',
]

#Esto es momentaneo, para que escuche los puertos del front.
# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:8000",
#     "http://django_api_forwardingcr:8000"
# ]

ROOT_URLCONF = 'app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / "core/templates",
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',  # Backend por defecto
]

LOGIN_URL = "/login/"
LOGIN_REDIRECT_URL = "/base/"
LOGOUT_REDIRECT_URL = "/login/"


WSGI_APPLICATION = 'app.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'HOST': os.environ.get('DB_HOST'),
        'NAME': os.environ.get('DB_NAME'),
        'USER': os.environ.get('DB_USER'),
        'PASSWORD': os.environ.get('DB_PASS'),
        'OPTIONS': {
                    'charset': 'utf8mb4',
                    'use_unicode': True, },
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'es'


USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

# STATIC_URL = '/static/'



# STATICFILES_DIRS = [
#     BASE_DIR / "static",
# ]
#STATIC_ROOT = BASE_DIR / "staticfiles"

# if not DEBUG:
#     STATIC_ROOT = BASE_DIR/ "staticfiles"

#handle staticfiles


#compression and caching support
# STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'core.User'

REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
        'rest_framework_datatables.renderers.DatatablesRenderer',
    ),
    'DEFAULT_FILTER_BACKENDS': (
        'rest_framework_datatables.filters.DatatablesFilterBackend',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework_datatables.pagination.DatatablesPageNumberPagination',
    'PAGE_SIZE': 50,
}


SPECTACULAR_SETTINGS = {
    'TITLE': 'Tu API de ForwardingCR',
    'DESCRIPTION': 'Documentación de la API para generación de cotizaciones',
    'VERSION': '1.0.0',
}






EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.environ.get('EMAIL_HOST')
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
# print(f"📧 Enviando desde: {EMAIL_HOST_USER}")
# print(f"🔑 Contraseña usada: {EMAIL_HOST_PASSWORD}")


import ssl
EMAIL_SSL_CERTFILE = None
EMAIL_SSL_KEYFILE = None

# Ignora temporalmente la verificación SSL (solo desarrollo)
EMAIL_SSL_CONTEXT = ssl._create_unverified_context()


# Credenciales de Linode Object Storage
LINODE_OBJECT_STORAGE_KEY = os.getenv('LINODE_OBJECT_STORAGE_KEY')
LINODE_OBJECT_STORAGE_SECRET = os.getenv('LINODE_OBJECT_STORAGE_SECRET')
LINODE_STORAGE_BUCKET_NAME = os.getenv('LINODE_STORAGE_BUCKET_NAME')
LINODE_STORAGE_ENDPOINT = os.getenv('LINODE_STORAGE_ENDPOINT')


# Configuración para Django Storages con Linode
AWS_ACCESS_KEY_ID = LINODE_OBJECT_STORAGE_KEY
AWS_SECRET_ACCESS_KEY = LINODE_OBJECT_STORAGE_SECRET
AWS_STORAGE_BUCKET_NAME = LINODE_STORAGE_BUCKET_NAME
AWS_S3_ENDPOINT_URL = LINODE_STORAGE_ENDPOINT # URL de Linode Object Storage

# 🔹 IMPORTANTE: Evitar URLs firmadas 🔹
AWS_QUERYSTRING_AUTH = False  # Esto hace que Django use URLs públicas sin expiración
AWS_S3_FILE_OVERWRITE = True  # Sobrescribe archivos existentes
AWS_DEFAULT_ACL = None  # Evita permisos erróneos



# Configurar almacenamiento de archivos estáticos
# STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
#STATIC_URL = f"{AWS_S3_ENDPOINT_URL}/{AWS_STORAGE_BUCKET_NAME}/"
STATIC_URL = f"{AWS_S3_ENDPOINT_URL}/{AWS_STORAGE_BUCKET_NAME}/static/"

# Si estás usando Linode Object Storage
if not DEBUG:
    STATIC_URL = f"{AWS_S3_ENDPOINT_URL}/{AWS_STORAGE_BUCKET_NAME}/static/"

# Configurar almacenamiento de archivos de usuario (media)
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
MEDIA_URL = f"{AWS_S3_ENDPOINT_URL}/{AWS_STORAGE_BUCKET_NAME}/media/"

# Parámetros para asegurarse de que los archivos sean públicos
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',
    'ACL': 'public-read',  # Permitir que los archivos sean accesibles públicamente
}


if DEBUG:
    STATIC_URL = '/static/'
    STATICFILES_DIRS = [BASE_DIR / "static"]
    STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'
else:
    STATICFILES_DIRS = [BASE_DIR / "static"]
    AWS_LOCATION = ""  # No uses una carpeta como "static"
    STATICFILES_STORAGE = 'storages.backends.s3boto3.S3StaticStorage'
    STATIC_URL = f"{AWS_S3_ENDPOINT_URL}/{AWS_STORAGE_BUCKET_NAME}/"

# 🔹 Remueve `STATICFILES_DIRS` si ya no usas `staticfiles/`
# if DEBUG:
#     STATICFILES_DIRS = [BASE_DIR / "static"]
# else:
#     STATICFILES_DIRS = []

# if DEBUG:
#     STATIC_URL = '/static/'
#     STATICFILES_DIRS = [BASE_DIR / "static"]
#     STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'
# else:
#     # STATIC_URL = f"{AWS_S3_ENDPOINT_URL}/{AWS_STORAGE_BUCKET_NAME}/static/"
#     # STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
#     STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
#     STATIC_URL = f"{AWS_S3_ENDPOINT_URL}/{AWS_STORAGE_BUCKET_NAME}/"






import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration

SENTRY_ENDPOINT = os.environ.get("SENTRY_ENDPOINT")
#print(f"SENTRY_ENDPOINT: {SENTRY_ENDPOINT}") 
if not DEBUG:
    sentry_sdk.init(
        dsn=os.environ.get('SENTRY_ENDPOINT'),
        integrations=[DjangoIntegration()],
        environment="production",
        traces_sample_rate=1.0,
        send_default_pii=True
    )
